#!/usr/bin/env python3
"""
Script de test des fonctionnalit√©s NLP
Teste les services d'extraction, classification et matching
"""

import asyncio
import json
import os
import sys
from typing import Dict, Any

import httpx

# Configuration
API_BASE_URL = "http://localhost:8000/api/v1"
TIMEOUT = 30.0

# Emails de test pour chaque type
TEST_EMAILS = {
    "ACK": {
        "subject": "Accus√© de r√©ception - Candidature D√©veloppeur Python",
        "body": """Bonjour,

Nous avons bien re√ßu votre candidature pour le poste de D√©veloppeur Python Senior chez TechCorp.

Notre √©quipe RH va √©tudier votre profil et vous recontactera sous 15 jours.

Merci pour votre int√©r√™t pour notre entreprise.

Cordialement,
Marie Dubois
Responsable RH
TechCorp
marie.dubois@techcorp.com
+33 1 23 45 67 89""",
        "sender_email": "rh@techcorp.com"
    },
    
    "REJECTED": {
        "subject": "Suite de votre candidature - TechCorp",
        "body": """Bonjour,

Nous vous remercions pour l'int√©r√™t que vous portez √† TechCorp et pour le temps consacr√© √† votre candidature.

Apr√®s √©tude attentive de votre dossier pour le poste de Data Scientist, nous avons le regret de vous informer que nous ne donnerons pas suite √† votre candidature. Votre profil ne correspond pas exactement aux exigences actuelles du poste.

Nous conservons n√©anmoins votre CV dans notre base de donn√©es et n'h√©siterons pas √† vous recontacter si un poste correspondant mieux √† votre profil se pr√©sentait.

Nous vous souhaitons une excellente continuation dans vos recherches.

Cordialement,
Service Recrutement TechCorp""",
        "sender_email": "recrutement@techcorp.com"
    },
    
    "INTERVIEW": {
        "subject": "Convocation entretien - Poste DevOps Engineer",
        "body": """Bonjour,

Suite √† l'√©tude de votre candidature pour le poste de DevOps Engineer chez CloudFirst, nous souhaitons vous rencontrer pour un entretien.

Seriez-vous disponible la semaine du 15 janvier pour un entretien d'environ 1h ?

L'entretien se d√©roulera dans nos locaux au 42 rue de la Tech, 75001 Paris, ou en visioconf√©rence selon votre pr√©f√©rence.

Merci de nous confirmer vos disponibilit√©s dans les meilleurs d√©lais.

Dans l'attente de votre retour.

Cordialement,
Jean Martin
Manager Technique
CloudFirst
jean.martin@cloudfirst.io
Tel: +33 1 98 76 54 32""",
        "sender_email": "jean.martin@cloudfirst.io"
    },
    
    "OFFER": {
        "subject": "Offre d'emploi - Full Stack Developer chez WebFactory",
        "body": """F√©licitations !

Nous avons le plaisir de vous proposer le poste de Full Stack Developer au sein de notre √©quipe WebFactory.

D√©tails de l'offre :
- Poste : Full Stack Developer (CDI)
- Salaire : 52 000‚Ç¨ bruts annuels
- Avantages : Tickets restaurant, mutuelle, t√©l√©travail 2j/semaine
- Date de d√©but souhait√©e : 1er f√©vrier 2024
- Lieu : Paris 11√®me + t√©l√©travail

Cette offre est valable jusqu'au 31 janvier 2024.

Merci de nous faire savoir si cette proposition vous int√©resse. Nous restons √† votre disposition pour tout compl√©ment d'information.

Bien cordialement,
Sophie Laurent
Directrice RH WebFactory
sophie.laurent@webfactory.fr
+33 1 45 67 89 01""",
        "sender_email": "rh@webfactory.fr"
    },
    
    "REQUEST": {
        "subject": "Compl√©ment d'informations - Dossier candidature",
        "body": """Bonjour,

Votre candidature pour le poste de Machine Learning Engineer chez AI Innovations retient notre attention.

Afin de poursuivre le processus de recrutement, pourriez-vous nous transmettre les √©l√©ments suivants :

1. Vos trois derniers bulletins de salaire
2. Une attestation P√¥le Emploi (si applicable)  
3. Deux r√©f√©rences professionnelles avec coordonn√©es
4. Vos pr√©tentions salariales actuelles
5. Votre disponibilit√© pour commencer

Ces documents nous permettront de finaliser l'√©tude de votre dossier.

Merci de nous transmettre ces √©l√©ments dans les 5 jours ouvr√©s.

Cordialement,
Thomas Berger
Charg√© de recrutement
AI Innovations
thomas.berger@ai-innov.com""",
        "sender_email": "recrutement@ai-innov.com"
    }
}


def print_section(title: str):
    """Afficher un titre de section"""
    print(f"\n{'='*60}")
    print(f"üß™ {title}")
    print('='*60)


def print_result(test_name: str, result: Dict[str, Any], success: bool = True):
    """Afficher le r√©sultat d'un test"""
    status = "‚úÖ" if success else "‚ùå"
    print(f"\n{status} {test_name}")
    if success and result:
        print(json.dumps(result, indent=2, ensure_ascii=False))
    elif not success:
        print(f"   Erreur: {result}")


async def test_extraction(client: httpx.AsyncClient, email_data: Dict[str, str]):
    """Tester l'extraction d'entit√©s"""
    try:
        response = await client.post(
            f"{API_BASE_URL}/nlp/extract",
            json=email_data,
            timeout=TIMEOUT
        )
        response.raise_for_status()
        return response.json(), True
    except Exception as e:
        return str(e), False


async def test_classification(client: httpx.AsyncClient, email_data: Dict[str, str]):
    """Tester la classification d'email"""
    try:
        response = await client.post(
            f"{API_BASE_URL}/nlp/classify",
            json=email_data,
            timeout=TIMEOUT
        )
        response.raise_for_status()
        return response.json(), True
    except Exception as e:
        return str(e), False


async def test_matching(client: httpx.AsyncClient, email_data: Dict[str, str]):
    """Tester le matching s√©mantique"""
    try:
        response = await client.post(
            f"{API_BASE_URL}/nlp/match",
            json=email_data,
            timeout=TIMEOUT
        )
        response.raise_for_status()
        return response.json(), True
    except Exception as e:
        return str(e), False


async def test_full_processing(client: httpx.AsyncClient, email_data: Dict[str, str]):
    """Tester le traitement complet NLP"""
    try:
        response = await client.post(
            f"{API_BASE_URL}/nlp/process",
            json=email_data,
            timeout=TIMEOUT
        )
        response.raise_for_status()
        return response.json(), True
    except Exception as e:
        return str(e), False


async def test_health_check(client: httpx.AsyncClient):
    """V√©rifier que l'API est accessible"""
    try:
        response = await client.get(f"{API_BASE_URL}/health")
        response.raise_for_status()
        return response.json(), True
    except Exception as e:
        return str(e), False


async def run_tests():
    """Ex√©cuter tous les tests"""
    print("üöÄ Tests des fonctionnalit√©s NLP - AI Recruit Tracker")
    print("üì° URL API:", API_BASE_URL)
    
    async with httpx.AsyncClient() as client:
        # Test de connectivit√©
        print_section("Test de connectivit√©")
        health_result, health_success = await test_health_check(client)
        print_result("Health Check API", health_result, health_success)
        
        if not health_success:
            print("\n‚ùå L'API n'est pas accessible. V√©rifiez que le backend est d√©marr√©.")
            print("   Commande: docker-compose up -d backend")
            return
        
        # Tests pour chaque type d'email
        for email_type, email_data in TEST_EMAILS.items():
            print_section(f"Tests pour email type: {email_type}")
            
            print(f"\nüìß Email de test:")
            print(f"   Sujet: {email_data['subject']}")
            print(f"   Exp√©diteur: {email_data['sender_email']}")
            print(f"   Longueur corps: {len(email_data['body'])} caract√®res")
            
            # Test extraction
            extract_result, extract_success = await test_extraction(client, email_data)
            print_result("Extraction d'entit√©s", extract_result, extract_success)
            
            # Test classification
            classify_result, classify_success = await test_classification(client, email_data)
            print_result("Classification", classify_result, classify_success)
            
            # Test matching
            match_result, match_success = await test_matching(client, email_data)
            print_result("Matching s√©mantique", match_result, match_success)
            
            # Test traitement complet
            process_result, process_success = await test_full_processing(client, email_data)
            print_result("Traitement complet", process_result, process_success)
            
            # V√©rification des r√©sultats attendus
            if classify_success and classify_result:
                predicted_type = classify_result.get('email_type', 'UNKNOWN')
                confidence = classify_result.get('confidence', 0)
                
                if predicted_type == email_type:
                    print(f"   ‚úÖ Classification correcte: {predicted_type} (confiance: {confidence:.2f})")
                else:
                    print(f"   ‚ö†Ô∏è  Classification diff√©rente: attendu {email_type}, obtenu {predicted_type}")
        
        print_section("R√©sum√© des tests")
        print("‚úÖ Tests termin√©s avec succ√®s !")
        print("\nüìä Points √† v√©rifier :")
        print("   ‚Ä¢ Les classifications correspondent-elles aux attentes ?")
        print("   ‚Ä¢ Les extractions contiennent-elles les bonnes entit√©s ?")
        print("   ‚Ä¢ Les scores de confiance sont-ils coh√©rents ?")
        print("   ‚Ä¢ Le matching trouve-t-il des candidatures similaires ?")
        
        print("\nüîß Pour d√©boguer :")
        print("   ‚Ä¢ V√©rifiez les logs: docker-compose logs -f backend")
        print("   ‚Ä¢ Testez manuellement: http://localhost:8000/docs")
        print("   ‚Ä¢ V√©rifiez la config Mistral dans backend/.env")


async def main():
    """Point d'entr√©e principal"""
    # V√©rification des pr√©requis
    if not os.getenv("MISTRAL_API_KEY"):
        print("‚ö†Ô∏è  Variable MISTRAL_API_KEY non trouv√©e")
        print("   Assurez-vous que backend/.env contient votre cl√© API Mistral")
    
    try:
        await run_tests()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Tests interrompus par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
