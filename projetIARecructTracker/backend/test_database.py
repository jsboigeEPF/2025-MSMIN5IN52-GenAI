#!/usr/bin/env python3
"""
Script pour tester la connexion √† la base de donn√©es et son initialisation
"""
import sys
import asyncio
from sqlalchemy import text, inspect
from app.core.database import engine, SessionLocal
from app.core.config import settings
from loguru import logger

async def test_database_connection():
    """Test de la connexion √† la base de donn√©es"""
    try:
        # Test de connexion
        logger.info(f"Test de connexion √† la base de donn√©es: {settings.DATABASE_URL}")
        
        with engine.connect() as connection:
            result = connection.execute(text("SELECT 1"))
            logger.success("‚úÖ Connexion √† la base de donn√©es r√©ussie")
            
            # Test des tables
            inspector = inspect(engine)
            tables = inspector.get_table_names()
            
            if tables:
                logger.success(f"‚úÖ Tables trouv√©es: {tables}")
                
                # V√©rification des tables principales
                expected_tables = ['job_applications', 'companies', 'job_offers', 'emails']
                missing_tables = [table for table in expected_tables if table not in tables]
                
                if missing_tables:
                    logger.warning(f"‚ö†Ô∏è  Tables manquantes: {missing_tables}")
                else:
                    logger.success("‚úÖ Toutes les tables principales sont pr√©sentes")
                    
                # Test d'une requ√™te sur chaque table
                for table in tables:
                    try:
                        count_result = connection.execute(text(f"SELECT COUNT(*) FROM {table}"))
                        count = count_result.scalar()
                        logger.info(f"üìä Table '{table}': {count} enregistrements")
                    except Exception as e:
                        logger.error(f"‚ùå Erreur lors de la lecture de la table '{table}': {e}")
            else:
                logger.warning("‚ö†Ô∏è  Aucune table trouv√©e - la base de donn√©es n'est pas initialis√©e")
                
    except Exception as e:
        logger.error(f"‚ùå Erreur de connexion √† la base de donn√©es: {e}")
        return False
        
    return True

async def test_database_operations():
    """Test des op√©rations CRUD de base"""
    try:
        logger.info("Test des op√©rations de base de donn√©es...")
        
        with SessionLocal() as db:
            # Test d'insertion simple dans une table de test
            try:
                db.execute(text("CREATE TABLE IF NOT EXISTS test_table (id SERIAL PRIMARY KEY, name VARCHAR(50))"))
                db.execute(text("INSERT INTO test_table (name) VALUES (:name)"), {"name": "test"})
                db.commit()
                
                # Test de lecture
                result = db.execute(text("SELECT * FROM test_table WHERE name = :name"), {"name": "test"})
                rows = result.fetchall()
                
                if rows:
                    logger.success("‚úÖ Op√©rations CRUD fonctionnelles")
                else:
                    logger.warning("‚ö†Ô∏è  Probl√®me avec les op√©rations CRUD")
                
                # Nettoyage
                db.execute(text("DROP TABLE IF EXISTS test_table"))
                db.commit()
                
            except Exception as e:
                logger.error(f"‚ùå Erreur lors des op√©rations CRUD: {e}")
                
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test des op√©rations: {e}")

def main():
    """Fonction principale"""
    logger.info("üîç Test de l'initialisation de la base de donn√©es")
    logger.info("=" * 50)
    
    # Test de connexion
    success = asyncio.run(test_database_connection())
    
    if success:
        # Test des op√©rations
        asyncio.run(test_database_operations())
        logger.success("üéâ Tests de base de donn√©es termin√©s")
    else:
        logger.error("üí• √âchec des tests de base de donn√©es")
        sys.exit(1)

if __name__ == "__main__":
    main()
