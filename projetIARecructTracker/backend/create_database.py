#!/usr/bin/env python3
"""
Script pour cr√©er la base de donn√©es PostgreSQL
"""
import psycopg
from app.core.config import settings
from loguru import logger

def create_database():
    """Cr√©er la base de donn√©es si elle n'existe pas"""
    try:
        # Extraire les param√®tres de connexion de l'URL
        url_parts = settings.DATABASE_URL.replace("postgresql+psycopg://", "").split("@")
        user_password = url_parts[0]
        host_db = url_parts[1]
        
        user, password = user_password.split(":")
        host_port, db_name = host_db.split("/")
        host, port = host_port.split(":")
        
        # Se connecter √† la base postgres par d√©faut pour cr√©er la nouvelle base
        default_url = f"postgresql://{user}:{password}@{host}:{port}/postgres"
        
        logger.info(f"Tentative de connexion √† PostgreSQL sur {host}:{port}")
        
        with psycopg.connect(default_url) as conn:
            conn.autocommit = True
            with conn.cursor() as cur:
                # V√©rifier si la base de donn√©es existe
                cur.execute("SELECT 1 FROM pg_database WHERE datname = %s", (db_name,))
                exists = cur.fetchone()
                
                if not exists:
                    logger.info(f"Cr√©ation de la base de donn√©es '{db_name}'...")
                    cur.execute(f'CREATE DATABASE "{db_name}"')
                    logger.success(f"‚úÖ Base de donn√©es '{db_name}' cr√©√©e avec succ√®s")
                else:
                    logger.info(f"‚úÖ La base de donn√©es '{db_name}' existe d√©j√†")
                    
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation de la base de donn√©es: {e}")
        raise

def test_connection():
    """Tester la connexion √† la base de donn√©es"""
    try:
        logger.info("Test de connexion √† la base de donn√©es...")
        
        with psycopg.connect(settings.DATABASE_URL.replace("postgresql+psycopg://", "postgresql://")) as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT version()")
                version = cur.fetchone()
                logger.success(f"‚úÖ Connexion r√©ussie - PostgreSQL version: {version[0]}")
                
    except Exception as e:
        logger.error(f"‚ùå Erreur de connexion: {e}")
        raise

if __name__ == "__main__":
    logger.info("üîß Configuration de la base de donn√©es PostgreSQL")
    logger.info("=" * 50)
    
    try:
        create_database()
        test_connection()
        logger.success("üéâ Configuration de la base de donn√©es termin√©e avec succ√®s")
    except Exception as e:
        logger.error(f"üí• √âchec de la configuration: {e}")
        exit(1)
